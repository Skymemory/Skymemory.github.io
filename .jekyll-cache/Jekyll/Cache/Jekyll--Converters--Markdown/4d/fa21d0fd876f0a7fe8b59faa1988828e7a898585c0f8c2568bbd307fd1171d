I"{;<p>最近，新接手一个系统，用户模型依然继承自<strong>AbstractBaseUser</strong>，但表中明显有些字段是没有用的，所以打算研究研究在Django中如何能随心所欲的定义自己的<strong>AUTH_USER_MODEL</strong>，并复用其提供的<strong>AuthenticationMiddleware</strong>、<strong>SessionMiddleware</strong></p>

<h4 id="解决方案">解决方案</h4>

<p>Django认证执行的代码流程如下所示：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># django/contrib/auth/__init__.py
</span><span class="k">def</span> <span class="nf">load_backend</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">import_string</span><span class="p">(</span><span class="n">path</span><span class="p">)()</span>


<span class="k">def</span> <span class="nf">_get_backends</span><span class="p">(</span><span class="n">return_tuples</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">backends</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">backend_path</span> <span class="ow">in</span> <span class="n">settings</span><span class="p">.</span><span class="n">AUTHENTICATION_BACKENDS</span><span class="p">:</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="n">load_backend</span><span class="p">(</span><span class="n">backend_path</span><span class="p">)</span>
        <span class="n">backends</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">backend</span><span class="p">,</span> <span class="n">backend_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">return_tuples</span> <span class="k">else</span> <span class="n">backend</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">backends</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">ImproperlyConfigured</span><span class="p">(</span>
            <span class="s">'No authentication backends have been defined. Does '</span>
            <span class="s">'AUTHENTICATION_BACKENDS contain anything?'</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">backends</span>


<span class="k">def</span> <span class="nf">get_backends</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">_get_backends</span><span class="p">(</span><span class="n">return_tuples</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">credentials</span><span class="p">):</span>
    <span class="s">"""
    If the given credentials are valid, return a User object.
    """</span>
    <span class="k">for</span> <span class="n">backend</span><span class="p">,</span> <span class="n">backend_path</span> <span class="ow">in</span> <span class="n">_get_backends</span><span class="p">(</span><span class="n">return_tuples</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">inspect</span><span class="p">.</span><span class="n">getcallargs</span><span class="p">(</span><span class="n">backend</span><span class="p">.</span><span class="n">authenticate</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">**</span><span class="n">credentials</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">TypeError</span><span class="p">:</span>
            <span class="c1"># This backend doesn't accept these credentials as arguments. Try the next one.
</span>            <span class="k">continue</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">backend</span><span class="p">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">**</span><span class="n">credentials</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">PermissionDenied</span><span class="p">:</span>
            <span class="c1"># This backend says to stop in our tracks - this user should not be allowed in at all.
</span>            <span class="k">break</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="c1"># Annotate the user object with the path of the backend.
</span>        <span class="n">user</span><span class="p">.</span><span class="n">backend</span> <span class="o">=</span> <span class="n">backend_path</span>
        <span class="k">return</span> <span class="n">user</span>

    <span class="c1"># The credentials supplied are invalid to all backends, fire signal
</span>    <span class="n">user_login_failed</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">sender</span><span class="o">=</span><span class="n">__name__</span><span class="p">,</span> <span class="n">credentials</span><span class="o">=</span><span class="n">_clean_credentials</span><span class="p">(</span><span class="n">credentials</span><span class="p">),</span> <span class="n">request</span><span class="o">=</span><span class="n">request</span><span class="p">)</span>
</code></pre></div></div>

<p>默认情况下，<strong>AUTHENTICATION_BACKENDS</strong>值为[‘django.contrib.auth.backends.ModelBackend’]，对于每一个backend类需提供authenticate接口实现基本认证功能</p>

<p>认证通过后，后端即可登录分配sessionid、记录sessionid对应的数据结构，默认情况下，Django中sessionid对应的数据结构为：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">'</span><span class="s1">_auth_user_id</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">5</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">_auth_user_backend</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">myauth.backends.ModelBackend</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">_auth_user_hash</span><span class="dl">'</span><span class="p">:</span> <span class="dl">''</span>
<span class="p">}</span>
</code></pre></div></div>

<p>刚看这部分源码时，比较有疑问的是—这里为什么需要记录<strong>_auth_user_hash</strong>，典型的一种情况：用户更改密码后，之前的sessionid都应失效，这也是记录<strong>_auth_user_hash</strong>的一个原因</p>

<p>后续用户带上sessionid请求后端时，后端通过AuthenticationMiddleware完成认证，认证代码逻辑如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># django/contrib/auth/__init__.py
</span><span class="k">def</span> <span class="nf">get_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="s">"""
    Return the user model instance associated with the given request session.
    If no user is retrieved, return an instance of `AnonymousUser`.
    """</span>
    <span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">AnonymousUser</span>
    <span class="n">user</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">user_id</span> <span class="o">=</span> <span class="n">_get_user_session_key</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
        <span class="n">backend_path</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">[</span><span class="n">BACKEND_SESSION_KEY</span><span class="p">]</span>
    <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">backend_path</span> <span class="ow">in</span> <span class="n">settings</span><span class="p">.</span><span class="n">AUTHENTICATION_BACKENDS</span><span class="p">:</span>
            <span class="n">backend</span> <span class="o">=</span> <span class="n">load_backend</span><span class="p">(</span><span class="n">backend_path</span><span class="p">)</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">backend</span><span class="p">.</span><span class="n">get_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
            <span class="c1"># Verify the session
</span>            <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">'get_session_auth_hash'</span><span class="p">):</span>
                <span class="n">session_hash</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">HASH_SESSION_KEY</span><span class="p">)</span>
                <span class="n">session_hash_verified</span> <span class="o">=</span> <span class="n">session_hash</span> <span class="ow">and</span> <span class="n">constant_time_compare</span><span class="p">(</span>
                    <span class="n">session_hash</span><span class="p">,</span>
                    <span class="n">user</span><span class="p">.</span><span class="n">get_session_auth_hash</span><span class="p">()</span>
                <span class="p">)</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">session_hash_verified</span><span class="p">:</span>
                    <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>
                    <span class="n">user</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">return</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">AnonymousUser</span><span class="p">()</span>

</code></pre></div></div>

<p>结合刚才提到的backend类需要提供authenticate接口，这里还需提供get_user接口，故backend类总共需要提供两个接口：authenticate和get_user</p>

<p>看上去实现自定义backend类即可满足我们的需求，但是这里面有其他的坑，这里我只给出解决方案，细节层面的问题可自行深入了解</p>

<p>settings.py文件中加入如下配置：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">AUTH_USER_MODEL</span> <span class="o">=</span> <span class="s">'myauth.User'</span>
<span class="n">AUTHENTICATION_BACKENDS</span> <span class="o">=</span> <span class="p">[</span><span class="s">'myauth.backends.ModelBackend'</span><span class="p">]</span>
</code></pre></div></div>

<p><strong>注意，这里的配置需根据自己的项目目录自定义</strong></p>

<p>自定义用户模型、backend类，实现基本接口即可：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">get_user_model</span>

<span class="n">UserModel</span> <span class="o">=</span> <span class="n">get_user_model</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">ModelBackend</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">verify_code</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">get_user</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">phone</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">address</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">()</span>

    <span class="n">REQUIRED_FIELDS</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">USERNAME_FIELD</span> <span class="o">=</span> <span class="s">'id'</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">is_anonymous</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">False</span>

    <span class="o">@</span><span class="nb">property</span>
    <span class="k">def</span> <span class="nf">is_authenticated</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
 
 
</code></pre></div></div>

<p>需要说明一点，用户模型里面定义了<strong>REQUIRED_FIELDS</strong>、<strong>USERNAME_FIELD</strong>，这是由于auth包下的checks.py检查机制导致的，该模块定义了AUTH_USER_MODEL的一些约束，为避免应用启动不起来而添加的</p>

:ET