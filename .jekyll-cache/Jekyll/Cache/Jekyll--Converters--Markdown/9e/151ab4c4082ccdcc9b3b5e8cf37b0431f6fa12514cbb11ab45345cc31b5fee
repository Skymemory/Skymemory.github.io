I"vR<p>整理了一些<em>LeetCode</em>上关于字符串、二分搜索专题的一些题目。</p>

<hr />

<h4 id="word-pattern"><a href="https://leetcode.com/problems/word-pattern/">Word Pattern</a></h4>

<p>给定字符串<em>letters</em>、<em>words</em>，建立<em>letter</em>与<em>word</em>之间映射，使得<em>letters</em>与<em>words</em>根据映射表可以互换。</p>

<p>解题代码:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">wordPattern</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pattern</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">words</span> <span class="o">=</span> <span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">letter2word</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="n">word2letter</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">letter</span><span class="p">,</span> <span class="n">word</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">words</span><span class="p">):</span>
            <span class="n">had</span> <span class="o">=</span> <span class="n">letter2word</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
            <span class="c1"># already allocated but not equal
</span>            <span class="k">if</span> <span class="n">had</span> <span class="ow">and</span> <span class="n">had</span> <span class="o">!=</span> <span class="n">word</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">letter2word</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span> <span class="o">=</span> <span class="n">word</span>
            
            <span class="c1"># check validness
</span>            <span class="n">had</span> <span class="o">=</span> <span class="n">word2letter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">had</span> <span class="ow">and</span> <span class="n">had</span> <span class="o">!=</span> <span class="n">letter</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">word2letter</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="n">letter</span>
        
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<hr />

<h4 id="find-k-th-smallest-pair-distance"><a href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/">Find K-th Smallest Pair Distance</a></h4>

<p>任选两个数字的组合数为$C_n^2$，可以考虑将问题转换为$m$个有序数组中查找排名第$k$大的元素，这样就能通过二分枚举第$k$大元素来解决，整体时间复杂度为$O(n* \log n+n* \log w)$，其中$w$为距离对值域范围。</p>

<p>解题代码:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">smallestDistancePair</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">order</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>

        <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">order</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">order</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="n">rank</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_rank</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">rank</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="p">:</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">low</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">get_rank</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">possible</span><span class="p">):</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="n">possible</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">cnt</span> <span class="o">+=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">cnt</span>
</code></pre></div></div>

<hr />

<h4 id="split-array-largest-sum"><a href="https://leetcode.com/problems/split-array-largest-sum/">Split Array Largest Sum</a></h4>

<p>经典的二分题目。。。。</p>

<p>解题思路:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">at_most</span><span class="p">):</span>
        <span class="n">slide</span><span class="p">,</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">at_most</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">elem</span> <span class="o">&gt;</span> <span class="n">at_most</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">if</span> <span class="n">slide</span> <span class="o">+</span> <span class="n">elem</span> <span class="o">&lt;=</span> <span class="n">at_most</span><span class="p">:</span>
                <span class="n">slide</span> <span class="o">+=</span> <span class="n">elem</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">slide</span> <span class="o">=</span> <span class="n">elem</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">cnt</span> <span class="o">&lt;=</span> <span class="n">m</span>
    
    <span class="k">def</span> <span class="nf">splitArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="n">ok</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">check</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ok</span><span class="p">:</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">high</span>
</code></pre></div></div>

<hr />

<h4 id="daily-temperatures"><a href="https://leetcode.com/problems/daily-temperatures/">Daily Temperatures</a></h4>

<p>解题代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">dailyTemperatures</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">T</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
        <span class="n">outcome</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
        <span class="n">top</span> <span class="o">=</span> <span class="n">n</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">top</span> <span class="o">=</span> <span class="n">bisect</span><span class="p">.</span><span class="n">bisect_right</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">n</span><span class="p">),</span> <span class="n">top</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">top</span> <span class="o">!=</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">outcome</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="n">top</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">i</span>

            <span class="n">top</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">stack</span><span class="p">[</span><span class="n">top</span><span class="p">]</span> <span class="o">=</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">i</span>

        <span class="k">return</span> <span class="n">outcome</span>
</code></pre></div></div>

<hr />

<h4 id="insufficient-nodes-in-root-to-leaf-paths"><a href="https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/">Insufficient Nodes in Root to Leaf Paths</a></h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">psum</span><span class="p">,</span> <span class="n">limit</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"root can't be empty."</span><span class="p">)</span>
    <span class="n">lnode</span><span class="p">,</span> <span class="n">rnode</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="ow">and</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">:</span>
        <span class="n">lnode</span><span class="p">,</span> <span class="n">vl</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">psum</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
        <span class="n">rnode</span><span class="p">,</span> <span class="n">vr</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">psum</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
        <span class="n">vmax</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">vl</span><span class="p">,</span> <span class="n">vr</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">:</span>
        <span class="n">lnode</span><span class="p">,</span> <span class="n">vl</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">psum</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
        <span class="n">vmax</span> <span class="o">=</span> <span class="n">vl</span>
    <span class="k">elif</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">:</span>
        <span class="n">rnode</span><span class="p">,</span> <span class="n">vr</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">psum</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
        <span class="n">vmax</span> <span class="o">=</span> <span class="n">vr</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">vmax</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">root</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">lnode</span>
    <span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">rnode</span>
    <span class="k">if</span> <span class="n">psum</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="n">vmax</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="n">vmax</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span>
    <span class="k">return</span> <span class="n">root</span><span class="p">,</span> <span class="n">vmax</span> <span class="o">+</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">sufficientSubset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="n">TreeNode</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="n">r</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">r</span>
</code></pre></div></div>

<hr />

:ET